from fpdf import FPDF
from typing import Dict, Any, List
from datetime import datetime
import io

class PDFExporter:
    """Export processed SkyBlock data to formatted PDF reports"""
    
    def __init__(self, processed_data: Dict[str, Any]):
        self.processed_data = processed_data
        self.pdf = FPDF()
        self.pdf.set_auto_page_break(auto=True, margin=15)
    
    def create_report(self) -> bytes:
        """Create a comprehensive PDF report of all profile data"""
        # Setup PDF
        self.pdf.add_page()
        self.pdf.set_font('Arial', 'B', 20)
        
        # Title page
        self._create_title_page()
        
        # Profile overview
        self._create_profile_overview_section()
        
        # Skills section
        self._create_skills_section()
        
        # Slayers section
        self._create_slayers_section()
        
        # Dungeons section
        self._create_dungeons_section()
        
        # Collections section
        self._create_collections_section()
        
        # Pets section
        self._create_pets_section()
        
        # Networth section
        self._create_networth_section()
        
        # Footer
        self._create_footer()
        
        # Return PDF as bytes
        return bytes(self.pdf.output())
    
    def _create_title_page(self):
        """Create the title page"""
        # Main title
        self.pdf.cell(0, 20, 'Sky-Port Profile Report', 0, 1, 'C')
        self.pdf.ln(10)
        
        # Profile info
        if 'profile_info' in self.processed_data:
            profile_data = self.processed_data['profile_info'].get('data', [{}])[0]
            
            self.pdf.set_font('Arial', 'B', 16)
            profile_name = profile_data.get('profile_name', 'Unknown Profile')
            self.pdf.cell(0, 10, f'Profile: {profile_name}', 0, 1, 'C')
            
            self.pdf.set_font('Arial', '', 12)
            game_mode = profile_data.get('game_mode', 'Normal')
            self.pdf.cell(0, 8, f'Game Mode: {game_mode}', 0, 1, 'C')
            
            last_save = profile_data.get('last_save', 'Unknown')
            self.pdf.cell(0, 8, f'Last Active: {last_save}', 0, 1, 'C')
        
        # Export info
        self.pdf.ln(15)
        self.pdf.set_font('Arial', 'I', 10)
        self.pdf.cell(0, 6, f'Generated by Sky-Port on {datetime.now().strftime("%Y-%m-%d at %H:%M:%S")}', 0, 1, 'C')
        
        # Add new page for content
        self.pdf.add_page()
    
    def _create_profile_overview_section(self):
        """Create profile overview section"""
        self._add_section_header('Profile Overview')
        
        if 'profile_info' not in self.processed_data:
            self._add_no_data_message('Profile information')
            return
        
        profile_data = self.processed_data['profile_info'].get('data', [{}])[0]
        
        # Create overview table
        overview_items = [
            ('Profile Name', profile_data.get('profile_name', 'Unknown')),
            ('Game Mode', profile_data.get('game_mode', 'Normal')),
            ('Fairy Souls Collected', str(profile_data.get('fairy_souls', 0))),
            ('Fairy Exchanges', str(profile_data.get('fairy_exchanges', 0))),
            ('Deaths', str(profile_data.get('deaths', 0))),
            ('Last Save', profile_data.get('last_save', 'Unknown'))
        ]
        
        self._create_two_column_table(overview_items)
        self.pdf.ln(10)
    
    def _create_skills_section(self):
        """Create skills section"""
        self._add_section_header('Skills')
        
        if 'skills' not in self.processed_data:
            self._add_no_data_message('Skills data')
            return
        
        # Skills summary
        skill_avg = self.processed_data['skills'].get('average', 0)
        self.pdf.set_font('Arial', 'B', 12)
        self.pdf.cell(0, 8, f'Skill Average: {skill_avg:.2f}', 0, 1)
        self.pdf.ln(5)
        
        # Skills table
        skills_data = self.processed_data['skills'].get('data', [])
        if skills_data:
            # Table headers
            self.pdf.set_font('Arial', 'B', 10)
            col_widths = [40, 20, 40, 30, 30]
            headers = ['Skill', 'Level', 'XP', 'XP to Next', 'Progress %']
            
            self._create_table_header(headers, col_widths)
            
            # Table data
            self.pdf.set_font('Arial', '', 9)
            for skill in skills_data:
                row_data = [
                    skill.get('skill', ''),
                    str(skill.get('level', 0)),
                    f"{skill.get('xp', 0):,}",
                    f"{skill.get('xp_to_next', 0):,}",
                    f"{skill.get('progress_percent', 0):.1f}%"
                ]
                self._create_table_row(row_data, col_widths)
        
        self.pdf.ln(10)
    
    def _create_slayers_section(self):
        """Create slayers section"""
        self._add_section_header('Slayers')
        
        if 'slayers' not in self.processed_data:
            self._add_no_data_message('Slayer data')
            return
        
        slayers_data = self.processed_data['slayers'].get('data', [])
        
        if slayers_data:
            # Table headers
            self.pdf.set_font('Arial', 'B', 10)
            col_widths = [50, 20, 30, 25, 25, 25, 25]
            headers = ['Slayer', 'Level', 'XP', 'T1 Kills', 'T2 Kills', 'T3 Kills', 'T4 Kills']
            
            self._create_table_header(headers, col_widths)
            
            # Table data
            self.pdf.set_font('Arial', '', 9)
            for slayer in slayers_data:
                row_data = [
                    slayer.get('slayer', ''),
                    str(slayer.get('level', 0)),
                    f"{slayer.get('xp', 0):,}",
                    str(slayer.get('tier_1_kills', 0)),
                    str(slayer.get('tier_2_kills', 0)),
                    str(slayer.get('tier_3_kills', 0)),
                    str(slayer.get('tier_4_kills', 0))
                ]
                self._create_table_row(row_data, col_widths)
        
        # Slayer summary
        slayer_summary = self.processed_data['slayers'].get('summary', {})
        total_xp = slayer_summary.get('total_slayer_xp', 0)
        total_kills = slayer_summary.get('total_kills', 0)
        
        self.pdf.ln(5)
        self.pdf.set_font('Arial', 'B', 10)
        self.pdf.cell(0, 6, f'Total Slayer XP: {total_xp:,} | Total Boss Kills: {total_kills:,}', 0, 1)
        self.pdf.ln(10)
    
    def _create_dungeons_section(self):
        """Create dungeons section"""
        self._add_section_header('Dungeons')
        
        if 'dungeons' not in self.processed_data:
            self._add_no_data_message('Dungeon data')
            return
        
        dungeons_data = self.processed_data['dungeons'].get('data', [])
        
        if dungeons_data:
            # Table headers
            self.pdf.set_font('Arial', 'B', 10)
            col_widths = [60, 25, 40, 35]
            headers = ['Type/Class', 'Level', 'XP', 'Highest Floor']
            
            self._create_table_header(headers, col_widths)
            
            # Table data
            self.pdf.set_font('Arial', '', 9)
            for dungeon in dungeons_data:
                row_data = [
                    dungeon.get('type', dungeon.get('class', '')),
                    str(dungeon.get('level', 0)),
                    f"{dungeon.get('xp', 0):,}",
                    str(dungeon.get('highest_floor', 'N/A'))
                ]
                self._create_table_row(row_data, col_widths)
        
        self.pdf.ln(10)
    
    def _create_collections_section(self):
        """Create collections section"""
        self._add_section_header('Collections (Top 20)')
        
        if 'collections' not in self.processed_data:
            self._add_no_data_message('Collections data')
            return
        
        collections_data = self.processed_data['collections'].get('data', [])
        
        # Show summary first
        collections_summary = self.processed_data['collections'].get('summary', {})
        total_collections = collections_summary.get('total_collections', 0)
        maxed_collections = collections_summary.get('maxed_collections', 0)
        
        self.pdf.set_font('Arial', 'B', 10)
        self.pdf.cell(0, 6, f'Total Collections: {total_collections} | Maxed Collections: {maxed_collections}', 0, 1)
        self.pdf.ln(5)
        
        if collections_data:
            # Sort by amount and take top 20
            sorted_collections = sorted(collections_data, key=lambda x: x.get('amount', 0), reverse=True)[:20]
            
            # Table headers
            self.pdf.set_font('Arial', 'B', 9)
            col_widths = [70, 30, 40, 20]
            headers = ['Collection', 'Category', 'Amount', 'Tier']
            
            self._create_table_header(headers, col_widths)
            
            # Table data
            self.pdf.set_font('Arial', '', 8)
            for collection in sorted_collections:
                row_data = [
                    collection.get('collection', '')[:25],  # Truncate long names
                    collection.get('category', ''),
                    f"{collection.get('amount', 0):,}",
                    str(collection.get('max_tier', 0))
                ]
                self._create_table_row(row_data, col_widths)
        
        self.pdf.ln(10)
    
    def _create_pets_section(self):
        """Create pets section"""
        self._add_section_header('Pets')
        
        if 'pets' not in self.processed_data:
            self._add_no_data_message('Pet data')
            return
        
        pets_data = self.processed_data['pets'].get('data', [])
        
        if not pets_data:
            self._add_no_data_message('Pet data')
            return
        
        # Show top 15 pets by level
        sorted_pets = sorted(pets_data, key=lambda x: x.get('level', 0), reverse=True)[:15]
        
        # Table headers
        self.pdf.set_font('Arial', 'B', 10)
        col_widths = [50, 25, 20, 35, 25, 35]
        headers = ['Pet Type', 'Tier', 'Level', 'XP', 'Active', 'Held Item']
        
        self._create_table_header(headers, col_widths)
        
        # Table data
        self.pdf.set_font('Arial', '', 9)
        for pet in sorted_pets:
            row_data = [
                pet.get('type', ''),
                pet.get('tier', ''),
                str(pet.get('level', 0)),
                f"{pet.get('xp', 0):,}",
                'Yes' if pet.get('active', False) else 'No',
                pet.get('held_item', 'None') or 'None'
            ]
            self._create_table_row(row_data, col_widths)
        
        self.pdf.ln(10)
    
    def _create_networth_section(self):
        """Create networth section"""
        self._add_section_header('Networth')
        
        if 'networth' not in self.processed_data:
            self._add_no_data_message('Networth data')
            return
        
        networth_data = self.processed_data['networth'].get('data', [])
        total_networth = self.processed_data['networth'].get('total', 0)
        
        # Show total first
        self.pdf.set_font('Arial', 'B', 14)
        self.pdf.cell(0, 10, f'Total Estimated Networth: {total_networth:,} coins', 0, 1)
        self.pdf.ln(5)
        
        if networth_data:
            # Simple networth breakdown
            self.pdf.set_font('Arial', 'B', 11)
            self.pdf.cell(0, 8, 'Networth Breakdown:', 0, 1)
            
            self.pdf.set_font('Arial', '', 10)
            for item in networth_data:
                category = item.get('category', 'Unknown')
                purse = item.get('purse', 0)
                bank = item.get('bank', 0)
                total = item.get('total', purse + bank)
                
                self.pdf.cell(40, 6, f'{category}:', 0, 0)
                self.pdf.cell(60, 6, f'{total:,} coins', 0, 1)
        
        self.pdf.ln(10)
    
    def _create_footer(self):
        """Create report footer"""
        self.pdf.add_page()
        self.pdf.set_font('Arial', 'B', 16)
        self.pdf.cell(0, 20, 'Report Summary', 0, 1, 'C')
        self.pdf.ln(10)
        
        # Overall statistics
        self.pdf.set_font('Arial', '', 12)
        summary_text = [
            'This report was generated by Sky-Port, a comprehensive Hypixel SkyBlock',
            'profile data exporter. All data is sourced directly from the Hypixel API',
            'and processed to provide detailed insights into your SkyBlock progress.',
            '',
            'Data categories included in this report:',
        ]
        
        for line in summary_text:
            self.pdf.cell(0, 8, line, 0, 1)
        
        # List included sections
        self.pdf.set_font('Arial', '', 11)
        for section in self.processed_data.keys():
            self.pdf.cell(0, 6, f'• {section.replace("_", " ").title()}', 0, 1)
        
        self.pdf.ln(10)
        self.pdf.set_font('Arial', 'I', 10)
        self.pdf.cell(0, 6, f'Report generated on: {datetime.now().strftime("%Y-%m-%d at %H:%M:%S")}', 0, 1)
        self.pdf.cell(0, 6, 'Sky-Port - Your SkyBlock Data Export Tool', 0, 1)
    
    # Helper methods
    def _add_section_header(self, title: str):
        """Add a section header"""
        self.pdf.set_font('Arial', 'B', 14)
        self.pdf.cell(0, 12, title, 0, 1)
        self.pdf.set_font('Arial', '', 10)
        self.pdf.ln(3)
    
    def _add_no_data_message(self, data_type: str):
        """Add a no data available message"""
        self.pdf.set_font('Arial', 'I', 10)
        self.pdf.cell(0, 8, f'No {data_type} available for this profile.', 0, 1)
        self.pdf.ln(5)
    
    def _create_two_column_table(self, items: List[tuple]):
        """Create a two-column table"""
        self.pdf.set_font('Arial', '', 10)
        
        for label, value in items:
            self.pdf.cell(60, 8, f'{label}:', 0, 0)
            self.pdf.cell(100, 8, str(value), 0, 1)
    
    def _create_table_header(self, headers: List[str], col_widths: List[int]):
        """Create table header row"""
        for i, header in enumerate(headers):
            self.pdf.cell(col_widths[i], 8, header, 1, 0, 'C')
        self.pdf.ln()
    
    def _create_table_row(self, row_data: List[str], col_widths: List[int]):
        """Create table data row"""
        for i, data in enumerate(row_data):
            self.pdf.cell(col_widths[i], 6, str(data), 1, 0, 'C')
        self.pdf.ln()